{"ast":null,"code":"import axios from 'axios';\nexport default {\n  data() {\n    return {\n      risingStocks: [],\n      fallingStocks: []\n    };\n  },\n  async created() {\n    const {\n      data\n    } = await axios.get('https://apis.data.go.kr/1160100/service/GetStockSecuritiesInfoService/getPreemptiveRightCertificatePriceInfo', {\n      params: {\n        serviceKey: 'YOUR_SERVICE_KEY_HERE',\n        // Please replace with your actual service key\n        numOfRows: 1,\n        pageNo: 1\n      }\n    });\n    console.log(data);\n    const itemsPath = 'response.body.items.item';\n    let items = _.get(data, itemsPath, []); // use lodash to safely access nested property\n\n    // If items is not an array (i.e., there is only one item), make it an array\n    if (!Array.isArray(items)) {\n      items = [items];\n    }\n    this.risingStocks = items.filter(stock => parseFloat(stock.fltRt) >= 20);\n    this.fallingStocks = items.filter(stock => parseFloat(stock.fltRt) <= -20);\n  }\n};","map":{"version":3,"names":["axios","data","risingStocks","fallingStocks","created","get","params","serviceKey","numOfRows","pageNo","console","log","itemsPath","items","_","Array","isArray","filter","stock","parseFloat","fltRt"],"sources":["C:\\Users\\qortm\\Desktop\\2023web-vue.js\\src\\views\\TestView.vue"],"sourcesContent":["<template>\n  <div>\n    <h1>Stocks with 20% Rise</h1>\n    <table>\n      <thead>\n        <tr>\n          <th>종목명</th>\n          <th>거래량</th>\n          <th>가격</th>\n          <th>등락률</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr v-for=\"stock in risingStocks\" :key=\"stock.itmsNm\">\n          <td>{{ stock.itmsNm }}</td>\n          <td>{{ stock.trqu }}</td>\n          <td>{{ stock.clpr }}</td>\n          <td>{{ stock.fltRt }}</td>\n        </tr>\n      </tbody>\n    </table>\n\n    <h1>Stocks with 20% Fall</h1>\n    <table>\n      <thead>\n        <tr>\n          <th>종목명</th>\n          <th>거래량</th>\n          <th>가격</th>\n          <th>등락률</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr v-for=\"stock in fallingStocks\" :key=\"stock.itmsNm\">\n          <td>{{ stock.itmsNm }}</td>\n          <td>{{ stock.trqu }}</td>\n          <td>{{ stock.clpr }}</td>\n          <td>{{ stock.fltRt }}</td>\n        </tr>\n      </tbody>\n    </table>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios'\n\nexport default {\n  data () {\n    return {\n      risingStocks: [],\n      fallingStocks: []\n    }\n  },\n  async created () {\n    const { data } = await axios.get('https://apis.data.go.kr/1160100/service/GetStockSecuritiesInfoService/getPreemptiveRightCertificatePriceInfo', {\n      params: {\n        serviceKey: 'YOUR_SERVICE_KEY_HERE',  // Please replace with your actual service key\n        numOfRows: 1,\n        pageNo: 1\n      }\n    })\n    console.log(data)\n    const itemsPath = 'response.body.items.item'\n    let items = _.get(data, itemsPath, [])  // use lodash to safely access nested property\n\n    // If items is not an array (i.e., there is only one item), make it an array\n    if (!Array.isArray(items)) {\n      items = [items]\n    }\n\n    this.risingStocks = items.filter(stock => parseFloat(stock.fltRt) >= 20)\n    this.fallingStocks = items.filter(stock => parseFloat(stock.fltRt) <= -20)\n  }\n}\n</script>\n"],"mappings":"AA6CA,OAAOA,KAAI,MAAO,OAAM;AAExB,eAAe;EACbC,IAAGA,CAAA,EAAK;IACN,OAAO;MACLC,YAAY,EAAE,EAAE;MAChBC,aAAa,EAAE;IACjB;EACF,CAAC;EACD,MAAMC,OAAMA,CAAA,EAAK;IACf,MAAM;MAAEH;IAAK,IAAI,MAAMD,KAAK,CAACK,GAAG,CAAC,8GAA8G,EAAE;MAC/IC,MAAM,EAAE;QACNC,UAAU,EAAE,uBAAuB;QAAG;QACtCC,SAAS,EAAE,CAAC;QACZC,MAAM,EAAE;MACV;IACF,CAAC;IACDC,OAAO,CAACC,GAAG,CAACV,IAAI;IAChB,MAAMW,SAAQ,GAAI,0BAAyB;IAC3C,IAAIC,KAAI,GAAIC,CAAC,CAACT,GAAG,CAACJ,IAAI,EAAEW,SAAS,EAAE,EAAE,GAAG;;IAExC;IACA,IAAI,CAACG,KAAK,CAACC,OAAO,CAACH,KAAK,CAAC,EAAE;MACzBA,KAAI,GAAI,CAACA,KAAK;IAChB;IAEA,IAAI,CAACX,YAAW,GAAIW,KAAK,CAACI,MAAM,CAACC,KAAI,IAAKC,UAAU,CAACD,KAAK,CAACE,KAAK,KAAK,EAAE;IACvE,IAAI,CAACjB,aAAY,GAAIU,KAAK,CAACI,MAAM,CAACC,KAAI,IAAKC,UAAU,CAACD,KAAK,CAACE,KAAK,KAAK,CAAC,EAAE;EAC3E;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}