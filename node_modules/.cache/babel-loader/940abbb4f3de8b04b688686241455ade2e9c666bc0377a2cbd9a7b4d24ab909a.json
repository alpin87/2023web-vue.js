{"ast":null,"code":"import axios from 'axios';\nexport default {\n  data() {\n    return {\n      tickerData: {},\n      topCoins: [],\n      cryptoExchanges: [{\n        name: 'Binance',\n        url: 'https://www.binance.com/',\n        description: 'Binance is a leading cryptocurrency exchange platform.'\n      }, {\n        name: 'Coinbase',\n        url: 'https://www.coinbase.com/',\n        description: 'Coinbase is a popular cryptocurrency exchange and wallet service.'\n      }\n      // Add more crypto exchanges here\n      ],\n\n      stockExchanges: [{\n        name: 'New York Stock Exchange (NYSE)',\n        url: 'https://www.nyse.com/',\n        description: \"NYSE is the world's largest stock exchange by market capitalization.\"\n      }, {\n        name: 'NASDAQ',\n        url: 'https://www.nasdaq.com/',\n        description: 'NASDAQ is a global electronic marketplace for buying and selling securities.'\n      }\n      // Add more stock exchanges here\n      ]\n    };\n  },\n\n  methods: {\n    async fetchTickerData() {\n      const paymentCurrency = 'KRW';\n      try {\n        const response = await axios.get(`https://api.bithumb.com/public/ticker/ALL_${paymentCurrency}`);\n        this.tickerData = response.data.data;\n        this.updateTopCoins();\n      } catch (error) {\n        console.error('Error:', error);\n      }\n    },\n    formatNumber(number) {\n      return Number(number).toLocaleString('en-US');\n    },\n    updateTopCoins() {\n      // Get the top 10 coins based on opening price\n      const coins = Object.keys(this.tickerData).map(symbol => ({\n        symbol,\n        ...this.tickerData[symbol]\n      })).sort((a, b) => b.opening_price - a.opening_price).slice(0, 10);\n      this.topCoins = coins;\n    }\n  },\n  mounted() {\n    // Fetch ticker data when the component is mounted\n    this.fetchTickerData();\n\n    // Fetch ticker data every 5 seconds\n    setInterval(() => {\n      this.fetchTickerData();\n    }, 5000);\n  }\n};","map":{"version":3,"names":["axios","data","tickerData","topCoins","cryptoExchanges","name","url","description","stockExchanges","methods","fetchTickerData","paymentCurrency","response","get","updateTopCoins","error","console","formatNumber","number","Number","toLocaleString","coins","Object","keys","map","symbol","sort","a","b","opening_price","slice","mounted","setInterval"],"sources":["C:\\Users\\qortm\\Desktop\\vueweb\\vue_web\\src\\views\\HomeView.vue"],"sourcesContent":["<template>\r\n  <div class=\"container\">\r\n    <div class=\"crypto-exchanges\">\r\n      <h2>암호화폐 거래소</h2>\r\n      <div class=\"exchange-box\" v-for=\"exchange in cryptoExchanges\" :key=\"exchange.name\">\r\n        <a :href=\"exchange.url\" target=\"_blank\">{{ exchange.name }}</a>\r\n        <p>{{ exchange.description }}</p>\r\n      </div>\r\n    </div>\r\n    <br>\r\n    <div class=\"stock-exchanges\">\r\n      <h2>주식 거래소</h2>\r\n      <div class=\"exchange-box\" v-for=\"exchange in stockExchanges\" :key=\"exchange.name\">\r\n        <a :href=\"exchange.url\" target=\"_blank\">{{ exchange.name }}</a>\r\n        <p>{{ exchange.description }}</p>\r\n      </div>\r\n    </div>\r\n    <br>\r\n    <table class=\"ticker-table\">\r\n      <thead>\r\n        <tr>\r\n          <th>이름</th>\r\n          <th>시가 00시 기준</th>\r\n          <th>종가 00시 기준</th>\r\n          <th>저가 00시 기준</th>\r\n          <th>고가 00시 기준</th>\r\n          <th>거래량 00시 기준</th>\r\n          <th>거래금액 00시 기준</th>\r\n          <th>전일종가</th>\r\n          <th>최근 24시간 거래량</th>\r\n          <th>최근 24시간 거래금액</th>\r\n          <th>최근 24시간 변동가</th>\r\n          <th>최근 24시간 변동률</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        <tr v-for=\"coin in topCoins\" :key=\"coin.symbol\">\r\n          <td>{{ coin.symbol }}</td>\r\n          <td>{{ formatNumber(coin.opening_price) }}</td>\r\n          <td>{{ formatNumber(coin.closing_price) }}</td>\r\n          <td>{{ formatNumber(coin.min_price) }}</td>\r\n          <td>{{ formatNumber(coin.max_price) }}</td>\r\n          <td>{{ formatNumber(coin.units_traded) }}</td>\r\n          <td>{{ formatNumber(coin.acc_trade_value) }}</td>\r\n          <td>{{ formatNumber(coin.prev_closing_price) }}</td>\r\n          <td>{{ formatNumber(coin.units_traded_24H) }}</td>\r\n          <td>{{ formatNumber(coin.acc_trade_value_24H) }}</td>\r\n          <td>{{ formatNumber(coin.fluctate_24H) }}</td>\r\n          <td>{{ coin.fluctate_rate_24H }}%</td>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios'\r\n\r\nexport default {\r\n  data () {\r\n    return {\r\n      tickerData: {},\r\n      topCoins: [],\r\n      cryptoExchanges: [\r\n        {\r\n          name: 'Binance',\r\n          url: 'https://www.binance.com/',\r\n          description: 'Binance is a leading cryptocurrency exchange platform.'\r\n        },\r\n        {\r\n          name: 'Coinbase',\r\n          url: 'https://www.coinbase.com/',\r\n          description: 'Coinbase is a popular cryptocurrency exchange and wallet service.'\r\n        }\r\n        // Add more crypto exchanges here\r\n      ],\r\n      stockExchanges: [\r\n        {\r\n          name: 'New York Stock Exchange (NYSE)',\r\n          url: 'https://www.nyse.com/',\r\n          description: \"NYSE is the world's largest stock exchange by market capitalization.\"\r\n        },\r\n        {\r\n          name: 'NASDAQ',\r\n          url: 'https://www.nasdaq.com/',\r\n          description: 'NASDAQ is a global electronic marketplace for buying and selling securities.'\r\n        }\r\n        // Add more stock exchanges here\r\n      ]\r\n    }\r\n  },\r\n  methods: {\r\n    async fetchTickerData () {\r\n      const paymentCurrency = 'KRW'\r\n\r\n      try {\r\n        const response = await axios.get(`https://api.bithumb.com/public/ticker/ALL_${paymentCurrency}`)\r\n        this.tickerData = response.data.data\r\n\r\n        this.updateTopCoins()\r\n      } catch (error) {\r\n        console.error('Error:', error)\r\n      }\r\n    },\r\n    formatNumber(number) {\r\n      return Number(number).toLocaleString('en-US')\r\n    },\r\n    updateTopCoins() {\r\n      // Get the top 10 coins based on opening price\r\n      const coins = Object.keys(this.tickerData)\r\n        .map(symbol => ({\r\n          symbol,\r\n          ...this.tickerData[symbol]\r\n        }))\r\n        .sort((a, b) => b.opening_price - a.opening_price)\r\n        .slice(0, 10);\r\n\r\n      this.topCoins = coins;\r\n    }\r\n  },\r\n  mounted() {\r\n    // Fetch ticker data when the component is mounted\r\n    this.fetchTickerData();\r\n\r\n    // Fetch ticker data every 5 seconds\r\n    setInterval(() => {\r\n      this.fetchTickerData();\r\n    }, 5000);\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.container {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  margin-top: 50px;\r\n}\r\n\r\n.ticker-table {\r\n  width: 100%;\r\n  border-collapse: collapse;\r\n  border: 1px solid #ddd;\r\n  box-shadow: 0px 0px 20px 0px rgba(0, 0, 0, 0.15);\r\n}\r\n\r\n.ticker-table th,\r\n.ticker-table td {\r\n  padding: 15px;\r\n  border-bottom: 1px solid #ddd;\r\n}\r\n\r\n.ticker-table th {\r\n  background-color: #4caf50;\r\n  color: white;\r\n  text-transform: uppercase;\r\n}\r\n\r\n.ticker-table tr:nth-child(even) {\r\n  background-color: #f8f8f8;\r\n}\r\n\r\n.crypto-exchanges,\r\n.stock-exchanges {\r\n  margin-bottom: 30px;\r\n}\r\n\r\n.exchange-box {\r\n  margin-top: 10px;\r\n  padding: 10px;\r\n  border: 1px solid #ccc;\r\n  border-radius: 4px;\r\n}\r\n\r\n.exchange-box a {\r\n  font-weight: bold;\r\n}\r\n\r\n.exchange-box p {\r\n  margin-top: 5px;\r\n}\r\n</style>\r\n"],"mappings":"AAwDA,OAAOA,KAAI,MAAO,OAAM;AAExB,eAAe;EACbC,IAAGA,CAAA,EAAK;IACN,OAAO;MACLC,UAAU,EAAE,CAAC,CAAC;MACdC,QAAQ,EAAE,EAAE;MACZC,eAAe,EAAE,CACf;QACEC,IAAI,EAAE,SAAS;QACfC,GAAG,EAAE,0BAA0B;QAC/BC,WAAW,EAAE;MACf,CAAC,EACD;QACEF,IAAI,EAAE,UAAU;QAChBC,GAAG,EAAE,2BAA2B;QAChCC,WAAW,EAAE;MACf;MACA;MAAA,CACD;;MACDC,cAAc,EAAE,CACd;QACEH,IAAI,EAAE,gCAAgC;QACtCC,GAAG,EAAE,uBAAuB;QAC5BC,WAAW,EAAE;MACf,CAAC,EACD;QACEF,IAAI,EAAE,QAAQ;QACdC,GAAG,EAAE,yBAAyB;QAC9BC,WAAW,EAAE;MACf;MACA;MAAA;IAEJ;EACF,CAAC;;EACDE,OAAO,EAAE;IACP,MAAMC,eAAcA,CAAA,EAAK;MACvB,MAAMC,eAAc,GAAI,KAAI;MAE5B,IAAI;QACF,MAAMC,QAAO,GAAI,MAAMZ,KAAK,CAACa,GAAG,CAAE,6CAA4CF,eAAgB,EAAC;QAC/F,IAAI,CAACT,UAAS,GAAIU,QAAQ,CAACX,IAAI,CAACA,IAAG;QAEnC,IAAI,CAACa,cAAc,CAAC;MACtB,EAAE,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,QAAQ,EAAEA,KAAK;MAC/B;IACF,CAAC;IACDE,YAAYA,CAACC,MAAM,EAAE;MACnB,OAAOC,MAAM,CAACD,MAAM,CAAC,CAACE,cAAc,CAAC,OAAO;IAC9C,CAAC;IACDN,cAAcA,CAAA,EAAG;MACf;MACA,MAAMO,KAAI,GAAIC,MAAM,CAACC,IAAI,CAAC,IAAI,CAACrB,UAAU,EACtCsB,GAAG,CAACC,MAAK,KAAM;QACdA,MAAM;QACN,GAAG,IAAI,CAACvB,UAAU,CAACuB,MAAM;MAC3B,CAAC,CAAC,EACDC,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKA,CAAC,CAACC,aAAY,GAAIF,CAAC,CAACE,aAAa,EAChDC,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC;MAEf,IAAI,CAAC3B,QAAO,GAAIkB,KAAK;IACvB;EACF,CAAC;EACDU,OAAOA,CAAA,EAAG;IACR;IACA,IAAI,CAACrB,eAAe,CAAC,CAAC;;IAEtB;IACAsB,WAAW,CAAC,MAAM;MAChB,IAAI,CAACtB,eAAe,CAAC,CAAC;IACxB,CAAC,EAAE,IAAI,CAAC;EACV;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}