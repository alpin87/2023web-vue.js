{"ast":null,"code":"import axios from 'axios';\nimport BarChart from '@/components/BarChart.vue';\nexport default {\n  components: {\n    BarChart\n  },\n  data() {\n    return {\n      stockName: '',\n      stocks: [],\n      dataCollection: {}\n    };\n  },\n  methods: {\n    async fetchStockData() {\n      const SERVICE_KEY = 'sPflHfYN%2B8hDbVPVQ1Tzan%2BDdcLML3zuUddb2dfQ8LSZ%2F7w8YaM5fvHp69XKA6djtQVDvhj8NKn6KgsdvMzaTg%3D%3D';\n      const url = `https://apis.data.go.kr/1160100/service/GetStockSecuritiesInfoService/getStockPriceInfo?serviceKey=${SERVICE_KEY}&numOfRows=100&pageNo=1`;\n      try {\n        const {\n          data\n        } = await axios.get(url);\n        const parser = new window.DOMParser();\n        const xmlDoc = parser.parseFromString(data, 'text/xml');\n        const items = xmlDoc.querySelectorAll('item');\n        this.stocks = Array.from(items).map(item => {\n          const itmsNm = item.querySelector('itmsNm').textContent;\n          if (this.stockName === '' || itmsNm.includes(this.stockName)) {\n            return {\n              srtnCd: item.querySelector('srtnCd').textContent,\n              itmsNm: itmsNm,\n              trqu: item.querySelector('trqu').textContent,\n              trPrc: item.querySelector('trPrc').textContent,\n              hipr: item.querySelector('hipr').textContent,\n              lopr: item.querySelector('lopr').textContent\n            };\n          }\n          return null;\n        }).filter(Boolean);\n\n        // Update chart data\n        this.dataCollection = {\n          labels: this.stocks.map(stock => stock.itmsNm),\n          datasets: [{\n            label: '거래량',\n            backgroundColor: '#3498db',\n            data: this.stocks.map(stock => stock.trqu)\n          }]\n        };\n      } catch (error) {\n        console.error('Error:', error);\n      }\n    }\n  },\n  mounted() {\n    this.fetchStockData();\n  }\n};","map":{"version":3,"names":["axios","BarChart","components","data","stockName","stocks","dataCollection","methods","fetchStockData","SERVICE_KEY","url","get","parser","window","DOMParser","xmlDoc","parseFromString","items","querySelectorAll","Array","from","map","item","itmsNm","querySelector","textContent","includes","srtnCd","trqu","trPrc","hipr","lopr","filter","Boolean","labels","stock","datasets","label","backgroundColor","error","console","mounted"],"sources":["C:\\Users\\qortm\\Desktop\\vueweb\\vue_web\\src\\views\\AboutView.vue"],"sourcesContent":["<template>\n  <div>\n    <bar-chart :chartData=\"dataCollection\"></bar-chart>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios'\nimport BarChart from '@/components/BarChart.vue'\n\nexport default {\n  components: {\n    BarChart\n  },\n  data () {\n    return {\n      stockName: '',\n      stocks: [],\n      dataCollection: {}\n    }\n  },\n  methods: {\n    async fetchStockData () {\n      const SERVICE_KEY = 'sPflHfYN%2B8hDbVPVQ1Tzan%2BDdcLML3zuUddb2dfQ8LSZ%2F7w8YaM5fvHp69XKA6djtQVDvhj8NKn6KgsdvMzaTg%3D%3D'\n      const url = `https://apis.data.go.kr/1160100/service/GetStockSecuritiesInfoService/getStockPriceInfo?serviceKey=${SERVICE_KEY}&numOfRows=100&pageNo=1`\n\n      try {\n        const { data } = await axios.get(url)\n        const parser = new window.DOMParser()\n        const xmlDoc = parser.parseFromString(data, 'text/xml')\n        const items = xmlDoc.querySelectorAll('item')\n\n        this.stocks = Array.from(items).map(item => {\n          const itmsNm = item.querySelector('itmsNm').textContent\n          if (this.stockName === '' || itmsNm.includes(this.stockName)) {\n            return {\n              srtnCd: item.querySelector('srtnCd').textContent,\n              itmsNm: itmsNm,\n              trqu: item.querySelector('trqu').textContent,\n              trPrc: item.querySelector('trPrc').textContent,\n              hipr: item.querySelector('hipr').textContent,\n              lopr: item.querySelector('lopr').textContent\n            }\n          }\n          return null\n        }).filter(Boolean)\n\n        // Update chart data\n        this.dataCollection = {\n          labels: this.stocks.map(stock => stock.itmsNm),\n          datasets: [\n            {\n              label: '거래량',\n              backgroundColor: '#3498db',\n              data: this.stocks.map(stock => stock.trqu)\n            }\n          ]\n        }\n      } catch (error) {\n        console.error('Error:', error)\n      }\n    }\n  },\n  mounted () {\n    this.fetchStockData()\n  }\n}\n</script>\n"],"mappings":"AAOA,OAAOA,KAAI,MAAO,OAAM;AACxB,OAAOC,QAAO,MAAO,2BAA0B;AAE/C,eAAe;EACbC,UAAU,EAAE;IACVD;EACF,CAAC;EACDE,IAAGA,CAAA,EAAK;IACN,OAAO;MACLC,SAAS,EAAE,EAAE;MACbC,MAAM,EAAE,EAAE;MACVC,cAAc,EAAE,CAAC;IACnB;EACF,CAAC;EACDC,OAAO,EAAE;IACP,MAAMC,cAAaA,CAAA,EAAK;MACtB,MAAMC,WAAU,GAAI,oGAAmG;MACvH,MAAMC,GAAE,GAAK,sGAAqGD,WAAY,yBAAuB;MAErJ,IAAI;QACF,MAAM;UAAEN;QAAK,IAAI,MAAMH,KAAK,CAACW,GAAG,CAACD,GAAG;QACpC,MAAME,MAAK,GAAI,IAAIC,MAAM,CAACC,SAAS,CAAC;QACpC,MAAMC,MAAK,GAAIH,MAAM,CAACI,eAAe,CAACb,IAAI,EAAE,UAAU;QACtD,MAAMc,KAAI,GAAIF,MAAM,CAACG,gBAAgB,CAAC,MAAM;QAE5C,IAAI,CAACb,MAAK,GAAIc,KAAK,CAACC,IAAI,CAACH,KAAK,CAAC,CAACI,GAAG,CAACC,IAAG,IAAK;UAC1C,MAAMC,MAAK,GAAID,IAAI,CAACE,aAAa,CAAC,QAAQ,CAAC,CAACC,WAAU;UACtD,IAAI,IAAI,CAACrB,SAAQ,KAAM,EAAC,IAAKmB,MAAM,CAACG,QAAQ,CAAC,IAAI,CAACtB,SAAS,CAAC,EAAE;YAC5D,OAAO;cACLuB,MAAM,EAAEL,IAAI,CAACE,aAAa,CAAC,QAAQ,CAAC,CAACC,WAAW;cAChDF,MAAM,EAAEA,MAAM;cACdK,IAAI,EAAEN,IAAI,CAACE,aAAa,CAAC,MAAM,CAAC,CAACC,WAAW;cAC5CI,KAAK,EAAEP,IAAI,CAACE,aAAa,CAAC,OAAO,CAAC,CAACC,WAAW;cAC9CK,IAAI,EAAER,IAAI,CAACE,aAAa,CAAC,MAAM,CAAC,CAACC,WAAW;cAC5CM,IAAI,EAAET,IAAI,CAACE,aAAa,CAAC,MAAM,CAAC,CAACC;YACnC;UACF;UACA,OAAO,IAAG;QACZ,CAAC,CAAC,CAACO,MAAM,CAACC,OAAO;;QAEjB;QACA,IAAI,CAAC3B,cAAa,GAAI;UACpB4B,MAAM,EAAE,IAAI,CAAC7B,MAAM,CAACgB,GAAG,CAACc,KAAI,IAAKA,KAAK,CAACZ,MAAM,CAAC;UAC9Ca,QAAQ,EAAE,CACR;YACEC,KAAK,EAAE,KAAK;YACZC,eAAe,EAAE,SAAS;YAC1BnC,IAAI,EAAE,IAAI,CAACE,MAAM,CAACgB,GAAG,CAACc,KAAI,IAAKA,KAAK,CAACP,IAAI;UAC3C;QAEJ;MACF,EAAE,OAAOW,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,QAAQ,EAAEA,KAAK;MAC/B;IACF;EACF,CAAC;EACDE,OAAMA,CAAA,EAAK;IACT,IAAI,CAACjC,cAAc,CAAC;EACtB;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}