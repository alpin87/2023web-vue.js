{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_bar_chart = _resolveComponent(\"bar-chart\");\n  return _openBlock(), _createElementBlock(\"div\", null, [_createVNode(_component_bar_chart, {\n    chartData: $data.dataCollection\n  }, null, 8 /* PROPS */, [\"chartData\"])]);\n}","map":{"version":3,"names":["_createElementBlock","_createVNode","_component_bar_chart","chartData","$data","dataCollection"],"sources":["C:\\Users\\qortm\\Desktop\\vueweb\\vue_web\\src\\views\\AboutView.vue"],"sourcesContent":["<template>\n  <div>\n    <bar-chart :chartData=\"dataCollection\"></bar-chart>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios'\nimport BarChart from '@/components/BarChart.vue'\n\nexport default {\n  components: {\n    BarChart\n  },\n  data () {\n    return {\n      stockName: '',\n      stocks: [],\n      dataCollection: {}\n    }\n  },\n  methods: {\n    async fetchStockData () {\n      const SERVICE_KEY = 'sPflHfYN%2B8hDbVPVQ1Tzan%2BDdcLML3zuUddb2dfQ8LSZ%2F7w8YaM5fvHp69XKA6djtQVDvhj8NKn6KgsdvMzaTg%3D%3D'\n      const url = `https://apis.data.go.kr/1160100/service/GetStockSecuritiesInfoService/getStockPriceInfo?serviceKey=${SERVICE_KEY}&numOfRows=100&pageNo=1`\n\n      try {\n        const { data } = await axios.get(url)\n        const parser = new window.DOMParser()\n        const xmlDoc = parser.parseFromString(data, 'text/xml')\n        const items = xmlDoc.querySelectorAll('item')\n\n        this.stocks = Array.from(items).map(item => {\n          const itmsNm = item.querySelector('itmsNm').textContent\n          if (this.stockName === '' || itmsNm.includes(this.stockName)) {\n            return {\n              srtnCd: item.querySelector('srtnCd').textContent,\n              itmsNm: itmsNm,\n              trqu: item.querySelector('trqu').textContent,\n              trPrc: item.querySelector('trPrc').textContent,\n              hipr: item.querySelector('hipr').textContent,\n              lopr: item.querySelector('lopr').textContent\n            }\n          }\n          return null\n        }).filter(Boolean)\n\n        // Update chart data\n        this.dataCollection = {\n          labels: this.stocks.map(stock => stock.itmsNm),\n          datasets: [\n            {\n              label: '거래량',\n              backgroundColor: '#3498db',\n              data: this.stocks.map(stock => stock.trqu)\n            }\n          ]\n        }\n      } catch (error) {\n        console.error('Error:', error)\n      }\n    }\n  },\n  mounted () {\n    this.fetchStockData()\n  }\n}\n</script>\n"],"mappings":";;;uBACEA,mBAAA,CAEM,cADJC,YAAA,CAAmDC,oBAAA;IAAvCC,SAAS,EAAEC,KAAA,CAAAC;EAAc,uC"},"metadata":{},"sourceType":"module","externalDependencies":[]}