{"ast":null,"code":"import axios from 'axios';\nexport default {\n  data() {\n    return {\n      tickerData: {},\n      topCoins: [],\n      cryptoExchanges: [{\n        name: 'Binance',\n        url: 'https://www.binance.com/',\n        description: '전 세계에서 가장 많은 사용자를 가지고 있으며, 가장 많은 암호화폐 거래를 처리하는 거래소입니다.'\n      }, {\n        name: 'Coinbase',\n        url: 'https://www.coinbase.com/',\n        description: '미국에서 가장 유명한 암호화폐 거래소 중 하나로, 특히 초보자들에게 친숙합니다.'\n      }, {\n        name: 'upbit',\n        url: 'https://upbit.com/',\n        description: '대한민국에서 가장 큰 거래량을 보유하고 있는 암호화폐 거래소입니다.'\n      }, {\n        name: 'bithumb',\n        url: 'https://www.bithumb.com/',\n        description: '대한민국에서 가장 큰 암호화폐 거래소 중 하나입니다.'\n      }\n      // Add more crypto exchanges here\n      ],\n\n      stockExchanges: [{\n        name: 'New York Stock Exchange (NYSE)',\n        url: 'https://www.nyse.com/',\n        description: '세계에서 가장 큰 증권거래소 중 하나입니다'\n      }, {\n        name: 'NASDAQ',\n        url: 'https://www.nasdaq.com/',\n        description: '미국의 주요 증권 거래소로서, 주로 기술 주식을 중심으로 거래됩니다.'\n      }, {\n        name: 'London Stock Exchange, LSE',\n        url: 'https://www.londonstockexchange.com/',\n        description: '세계에서 가장 오래된 증권 거래소 중 하나로, 영국 및 유럽의 주요 기업들이 상장되어 있습니다.'\n      }, {\n        name: 'krx',\n        url: 'http://www.krx.co.kr/',\n        description: '대한민국의 유일한 증권 및 파생 상품 거래소입니다. 주요 시장으로는 코스피, 코스닥, 코넥스가 있습니다.'\n      }\n      // Add more stock exchanges here\n      ]\n    };\n  },\n\n  methods: {\n    async fetchTickerData() {\n      const paymentCurrency = 'KRW'; // 변경 가능한 통화 코드\n\n      try {\n        const response = await axios.get(`https://api.bithumb.com/public/ticker/ALL_${paymentCurrency}`);\n        this.tickerData = response.data.data;\n        this.updateTopCoins();\n      } catch (error) {\n        console.error('Error:', error);\n      }\n    },\n    formatNumber(number) {\n      return Number(number).toLocaleString('en-US');\n    },\n    updateTopCoins() {\n      // Get the top 10 coins based on opening price\n      const coins = Object.keys(this.tickerData).map(symbol => ({\n        symbol,\n        ...this.tickerData[symbol]\n      })).sort((a, b) => b.opening_price - a.opening_price).slice(0, 10);\n      this.topCoins = coins;\n    }\n  },\n  mounted() {\n    // Fetch ticker data when the component is mounted\n    this.fetchTickerData();\n\n    // Fetch ticker data every 5 seconds\n    setInterval(() => {\n      this.fetchTickerData();\n    }, 5000);\n  }\n};","map":{"version":3,"names":["axios","data","tickerData","topCoins","cryptoExchanges","name","url","description","stockExchanges","methods","fetchTickerData","paymentCurrency","response","get","updateTopCoins","error","console","formatNumber","number","Number","toLocaleString","coins","Object","keys","map","symbol","sort","a","b","opening_price","slice","mounted","setInterval"],"sources":["C:\\Users\\qortm\\Desktop\\2023web-vue.js\\src\\views\\HomeView.vue"],"sourcesContent":["<template>\n     <div class=\"container\">\n    <div class=\"exchange-category-box\">\n      <div class=\"exchanges-container\">\n        <h2 class=\"category-title\">암호화폐 거래소</h2>\n        <div class=\"exchange-box\" v-for=\"exchange in cryptoExchanges\" :key=\"exchange.name\">\n          <a :href=\"exchange.url\" target=\"_blank\">{{ exchange.name }}</a>\n          <p>{{ exchange.description }}</p>\n        </div>\n      </div>\n    </div>\n    <!-- 새로운 div class=\"exchange-category-box\"를 추가 -->\n    <div class=\"exchange-category-box\">\n      <div class=\"exchanges-container\">\n        <h2 class=\"category-title\">주식 거래소</h2>\n        <div class=\"exchange-box\" v-for=\"exchange in stockExchanges\" :key=\"exchange.name\">\n          <a :href=\"exchange.url\" target=\"_blank\">{{ exchange.name }}</a>\n          <p>{{ exchange.description }}</p>\n        </div>\n      </div>\n    </div>\n    <br>\n    <button class=\"fetch-button\" @click=\"fetchTickerData\">정보 재갱신</button>\n    <table class=\"ticker-table\">\n      <thead>\n        <tr>\n          <th>이름</th>\n          <th>시가 00시 기준</th>\n          <th>종가 00시 기준</th>\n          <th>저가 00시 기준</th>\n          <th>고가 00시 기준</th>\n          <th>거래량 00시 기준</th>\n          <th>거래금액 00시 기준</th>\n          <th>전일종가</th>\n          <th>최근 24시간 거래량</th>\n          <th>최근 24시간 거래금액</th>\n          <th>F최근 24시간 변동가</th>\n          <th>최근 24시간 변동률</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr v-for=\"coin in topCoins\" :key=\"coin.symbol\">\n          <td>{{ coin.symbol }}</td>\n          <td>{{ formatNumber(coin.opening_price) }}</td>\n          <td>{{ formatNumber(coin.closing_price) }}</td>\n          <td>{{ formatNumber(coin.min_price) }}</td>\n          <td>{{ formatNumber(coin.max_price) }}</td>\n          <td>{{ formatNumber(coin.units_traded) }}</td>\n          <td>{{ formatNumber(coin.acc_trade_value) }}</td>\n          <td>{{ formatNumber(coin.prev_closing_price) }}</td>\n          <td>{{ formatNumber(coin.units_traded_24H) }}</td>\n          <td>{{ formatNumber(coin.acc_trade_value_24H) }}</td>\n          <td>{{ formatNumber(coin.fluctate_24H) }}</td>\n          <td>{{ coin.fluctate_rate_24H }}%</td>\n        </tr>\n      </tbody>\n    </table>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios'\n\nexport default {\n  data () {\n    return {\n      tickerData: {},\n      topCoins: [],\n      cryptoExchanges: [\n        {\n          name: 'Binance',\n          url: 'https://www.binance.com/',\n          description: '전 세계에서 가장 많은 사용자를 가지고 있으며, 가장 많은 암호화폐 거래를 처리하는 거래소입니다.'\n        },\n        {\n          name: 'Coinbase',\n          url: 'https://www.coinbase.com/',\n          description: '미국에서 가장 유명한 암호화폐 거래소 중 하나로, 특히 초보자들에게 친숙합니다.'\n        },\n        {\n          name: 'upbit',\n          url: 'https://upbit.com/',\n          description: '대한민국에서 가장 큰 거래량을 보유하고 있는 암호화폐 거래소입니다.'\n        },\n        {\n          name: 'bithumb',\n          url: 'https://www.bithumb.com/',\n          description: '대한민국에서 가장 큰 암호화폐 거래소 중 하나입니다.'\n        }\n        // Add more crypto exchanges here\n      ],\n      stockExchanges: [\n        {\n          name: 'New York Stock Exchange (NYSE)',\n          url: 'https://www.nyse.com/',\n          description: '세계에서 가장 큰 증권거래소 중 하나입니다'\n        },\n        {\n          name: 'NASDAQ',\n          url: 'https://www.nasdaq.com/',\n          description: '미국의 주요 증권 거래소로서, 주로 기술 주식을 중심으로 거래됩니다.'\n        },\n        {\n          name: 'London Stock Exchange, LSE',\n          url: 'https://www.londonstockexchange.com/',\n          description: '세계에서 가장 오래된 증권 거래소 중 하나로, 영국 및 유럽의 주요 기업들이 상장되어 있습니다.'\n        },\n        {\n          name: 'krx',\n          url: 'http://www.krx.co.kr/',\n          description: '대한민국의 유일한 증권 및 파생 상품 거래소입니다. 주요 시장으로는 코스피, 코스닥, 코넥스가 있습니다.'\n        }\n        // Add more stock exchanges here\n      ]\n    }\n  },\n  methods: {\n    async fetchTickerData () {\n      const paymentCurrency = 'KRW' // 변경 가능한 통화 코드\n\n      try {\n        const response = await axios.get(`https://api.bithumb.com/public/ticker/ALL_${paymentCurrency}`)\n        this.tickerData = response.data.data\n\n        this.updateTopCoins()\n      } catch (error) {\n        console.error('Error:', error)\n      }\n    },\n    formatNumber (number) {\n      return Number(number).toLocaleString('en-US')\n    },\n    updateTopCoins () {\n      // Get the top 10 coins based on opening price\n      const coins = Object.keys(this.tickerData)\n        .map(symbol => ({\n          symbol,\n          ...this.tickerData[symbol]\n        }))\n        .sort((a, b) => b.opening_price - a.opening_price)\n        .slice(0, 10)\n\n      this.topCoins = coins\n    }\n  },\n  mounted () {\n    // Fetch ticker data when the component is mounted\n    this.fetchTickerData()\n\n    // Fetch ticker data every 5 seconds\n    setInterval(() => {\n      this.fetchTickerData()\n    }, 5000)\n  }\n}\n</script>\n\n<style scoped>\n.container {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  padding: 20px;\n  margin: auto;\n  max-width: 1400px;\n  overflow: auto;\n  background-color: #fafafa;  /* 아주 약간 더 밝은 회색으로 변경 */\n  border-radius: 10px;\n}\n.fetch-button {\n  padding: 10px 20px;\n  background-color: #68a030;  /* 더 밝은 초록색으로 변경 */\n  color: white;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n  font-size: 1rem;\n  margin-bottom: 20px;\n}\n\n.ticker-table {\n  width: 100%;\n  border-collapse: collapse;\n  border: 1px solid #ddd;\n  box-shadow: 0px 0px 20px 0px rgba(0, 0, 0, 0.05);  /* 그림자 색상을 약간 더 밝게 */\n}\n\n.ticker-table th,\n.ticker-table td {\n  padding: 15px;\n  border-bottom: 1px solid #ddd;\n}\n\n.ticker-table th {\n  background-color: #68a030;  /* 더 밝은 초록색으로 변경 */\n  color: white;\n  text-transform: uppercase;\n}\n\n.ticker-table tr:nth-child(even) {\n  background-color: #fcfcfc;  /* 아주 약간 더 밝은 회색으로 변경 */\n}\n\n.exchanges-container {\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-between;\n  margin-bottom: 20px;\n}\n\n.exchange-box {\n  box-shadow: 0 0 10px rgba(0,0,0,0.05);\n  flex: 0 0 calc(50% - 10px);\n  margin-top: 10px;\n  padding: 20px;\n  border-radius: 5px;\n  background-color: #fff;\n  margin-bottom: 20px;\n}\n\n@media (max-width: 600px) {\n  .exchange-box {\n    flex: 0 0 100%;\n  }\n}\n\n.exchange-box a {\n  color: #333;\n  text-decoration: none;\n  font-size: 1.2em;\n  margin-bottom: 10px;\n  display: inline-block;\n}\n\n.exchange-box p {\n  color: #666;\n  line-height: 1.6;\n}\n\n.exchange-category-box {\n  border: 1px solid #ddd;\n  border-radius: 4px;\n  padding: 20px;\n  margin-bottom: 20px;\n}\n</style>\n"],"mappings":"AA6DA,OAAOA,KAAI,MAAO,OAAM;AAExB,eAAe;EACbC,IAAGA,CAAA,EAAK;IACN,OAAO;MACLC,UAAU,EAAE,CAAC,CAAC;MACdC,QAAQ,EAAE,EAAE;MACZC,eAAe,EAAE,CACf;QACEC,IAAI,EAAE,SAAS;QACfC,GAAG,EAAE,0BAA0B;QAC/BC,WAAW,EAAE;MACf,CAAC,EACD;QACEF,IAAI,EAAE,UAAU;QAChBC,GAAG,EAAE,2BAA2B;QAChCC,WAAW,EAAE;MACf,CAAC,EACD;QACEF,IAAI,EAAE,OAAO;QACbC,GAAG,EAAE,oBAAoB;QACzBC,WAAW,EAAE;MACf,CAAC,EACD;QACEF,IAAI,EAAE,SAAS;QACfC,GAAG,EAAE,0BAA0B;QAC/BC,WAAW,EAAE;MACf;MACA;MAAA,CACD;;MACDC,cAAc,EAAE,CACd;QACEH,IAAI,EAAE,gCAAgC;QACtCC,GAAG,EAAE,uBAAuB;QAC5BC,WAAW,EAAE;MACf,CAAC,EACD;QACEF,IAAI,EAAE,QAAQ;QACdC,GAAG,EAAE,yBAAyB;QAC9BC,WAAW,EAAE;MACf,CAAC,EACD;QACEF,IAAI,EAAE,4BAA4B;QAClCC,GAAG,EAAE,sCAAsC;QAC3CC,WAAW,EAAE;MACf,CAAC,EACD;QACEF,IAAI,EAAE,KAAK;QACXC,GAAG,EAAE,uBAAuB;QAC5BC,WAAW,EAAE;MACf;MACA;MAAA;IAEJ;EACF,CAAC;;EACDE,OAAO,EAAE;IACP,MAAMC,eAAcA,CAAA,EAAK;MACvB,MAAMC,eAAc,GAAI,KAAI,EAAE;;MAE9B,IAAI;QACF,MAAMC,QAAO,GAAI,MAAMZ,KAAK,CAACa,GAAG,CAAE,6CAA4CF,eAAgB,EAAC;QAC/F,IAAI,CAACT,UAAS,GAAIU,QAAQ,CAACX,IAAI,CAACA,IAAG;QAEnC,IAAI,CAACa,cAAc,CAAC;MACtB,EAAE,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,QAAQ,EAAEA,KAAK;MAC/B;IACF,CAAC;IACDE,YAAWA,CAAGC,MAAM,EAAE;MACpB,OAAOC,MAAM,CAACD,MAAM,CAAC,CAACE,cAAc,CAAC,OAAO;IAC9C,CAAC;IACDN,cAAaA,CAAA,EAAK;MAChB;MACA,MAAMO,KAAI,GAAIC,MAAM,CAACC,IAAI,CAAC,IAAI,CAACrB,UAAU,EACtCsB,GAAG,CAACC,MAAK,KAAM;QACdA,MAAM;QACN,GAAG,IAAI,CAACvB,UAAU,CAACuB,MAAM;MAC3B,CAAC,CAAC,EACDC,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKA,CAAC,CAACC,aAAY,GAAIF,CAAC,CAACE,aAAa,EAChDC,KAAK,CAAC,CAAC,EAAE,EAAE;MAEd,IAAI,CAAC3B,QAAO,GAAIkB,KAAI;IACtB;EACF,CAAC;EACDU,OAAMA,CAAA,EAAK;IACT;IACA,IAAI,CAACrB,eAAe,CAAC;;IAErB;IACAsB,WAAW,CAAC,MAAM;MAChB,IAAI,CAACtB,eAAe,CAAC;IACvB,CAAC,EAAE,IAAI;EACT;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}