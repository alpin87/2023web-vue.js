{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { naverLoginInstance } from 'vue-naver-login';\nexport default {\n  data() {\n    return {\n      username: '',\n      password: ''\n    };\n  },\n  mounted() {\n    const naverLogin = new naverLoginInstance({\n      clientId: 'm5npFmBjcdL8D4jVW6wx',\n      callbackUrl: 'http://localhost:8080/naverlogin',\n      isPopup: true,\n      callbackHandle: true,\n      loginButton: {\n        color: 'green',\n        type: 3,\n        height: '50'\n      }\n    });\n    naverLogin.getLoginStatus(status => {\n      if (status) {\n        // 로그인 상태, 토큰 정보 가져오기\n        const email = naverLogin.user.getEmail();\n        // ...\n      } else {\n        console.log('네이버 로그인이 아직 되지 않았습니다.');\n      }\n    });\n  },\n  methods: {\n    login() {\n      if (!this.username) {\n        alert('아이디를 입력해주세요');\n        this.username = '';\n        return;\n      }\n      if (!this.password) {\n        alert('비밀번호를 입력해주세요');\n        this.password = '';\n        return;\n      }\n      alert('로그인 성공!');\n      this.$router.push({\n        name: 'home'\n      });\n    }\n  }\n};","map":{"version":3,"names":["naverLoginInstance","data","username","password","mounted","naverLogin","clientId","callbackUrl","isPopup","callbackHandle","loginButton","color","type","height","getLoginStatus","status","email","user","getEmail","console","log","methods","login","alert","$router","push","name"],"sources":["C:\\Users\\qortm\\Desktop\\vue-real\\2023web-vue.js\\src\\components\\LoginPage.vue"],"sourcesContent":["<template>\r\n  <div class=\"container\">\r\n    <div class=\"card\">\r\n      <h2 class=\"card-header\">Login</h2>\r\n      <form @submit.prevent=\"login\" class=\"form\">\r\n        <div class=\"form-group\">\r\n          <label for=\"username\">아이디</label>\r\n          <input type=\"text\" id=\"username\" v-model=\"username\" class=\"form-control\" required>\r\n          <label for=\"password\">비밀번호</label>\r\n          <input type=\"password\" id=\"password\" v-model=\"password\" class=\"form-control\" required>\r\n          <button type=\"submit\" class=\"btn\">Login</button>\r\n          <router-link to=\"/signup\" custom>\r\n            <template v-slot:default=\"{ navigate }\">\r\n            <button class=\"btn\" @click=\"navigate\">Sign Up</button>\r\n            </template>\r\n          </router-link>\r\n          <label for=\"naver\">Naver Login</label>\r\n          <div id=\"naverIdLogin\"></div> <!-- 네이버 로그인 버튼을 위한 div -->\r\n        </div>\r\n      </form>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { naverLoginInstance } from 'vue-naver-login'\r\n\r\nexport default {\r\n  data () {\r\n    return {\r\n      username: '',\r\n      password: ''\r\n    }\r\n  },\r\n  mounted () {\r\n    const naverLogin = new naverLoginInstance({\r\n      clientId: 'm5npFmBjcdL8D4jVW6wx',\r\n      callbackUrl: 'http://localhost:8080/naverlogin',\r\n      isPopup: true,\r\n      callbackHandle: true,\r\n      loginButton: {color: 'green', type: 3, height: '50'}\r\n    })\r\n    naverLogin.getLoginStatus((status) => {\r\n      if (status) {\r\n        // 로그인 상태, 토큰 정보 가져오기\r\n        const email = naverLogin.user.getEmail()\r\n        // ...\r\n      } else {\r\n        console.log('네이버 로그인이 아직 되지 않았습니다.')\r\n      }\r\n    })\r\n  },\r\n  methods: {\r\n    login () {\r\n      if (!this.username) {\r\n        alert('아이디를 입력해주세요')\r\n        this.username = ''\r\n        return\r\n      }\r\n\r\n      if (!this.password) {\r\n        alert('비밀번호를 입력해주세요')\r\n        this.password = ''\r\n        return\r\n      }\r\n\r\n      alert('로그인 성공!')\r\n      this.$router.push({ name: 'home' })\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\nbody, html {\r\n  width: 1800px;  /* Updated width to 1800px */\r\n  height: 100%;\r\n  margin: 0;\r\n  padding: 0;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center; /* Updated to center */\r\n  background: #f2f2f2;\r\n}\r\n\r\n.container {\r\n  width: 1800px; /* Updated width to 1800px */\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: flex-start; /* Updated to align items to the start */\r\n  min-height: 100vh;\r\n  padding: 0 20px;\r\n  background-color: #f4f4f4;\r\n}\r\n\r\n.form {\r\n  padding: 50px 20px; /* Increase the top and bottom padding */\r\n}\r\n\r\n.card {\r\n  width: 100%;\r\n  max-width: 500px;\r\n  background-color: #fff;\r\n  box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.1);\r\n  border-radius: 10px;\r\n  overflow: hidden;\r\n  margin-top:200px;\r\n}\r\n\r\n.card-header {\r\n  background-color: #42b983;\r\n  color: #fff;\r\n  padding: 20px;\r\n  font-size: 1.5rem;\r\n}\r\n\r\n.form {\r\n  padding: 20px;\r\n}\r\n\r\n.form-group {\r\n  display: flex;\r\n  flex-direction: column; /* Stack the elements vertically */\r\n  align-items: stretch; /* Stretch the elements to take up full width */\r\n  gap: 10px; /* Space between the elements */\r\n}\r\n\r\n.form-control {\r\n  padding: 15px;  /* Increased padding */\r\n  border-radius: 5px;\r\n  border: 1px solid #ddd;\r\n  font-size: 1.5rem;  /* Increased font size */\r\n  height: 1.5em;  /* Increased height */\r\n  width: 93%;  /* Added to set the width of the input fields */\r\n}\r\n\r\n.btn,\r\n.btn-secondary {\r\n  padding: 10px 20px;\r\n  border: none;\r\n  border-radius: 5px;\r\n  color: #fff;\r\n  background-color: #42b983;\r\n  cursor: pointer;\r\n  font-size: 1rem;\r\n}\r\n\r\n.btn-secondary {\r\n  background-color: #ddd;\r\n  color: #333;\r\n}\r\n</style>\r\n"],"mappings":";AAyBA,SAASA,kBAAiB,QAAS,iBAAgB;AAEnD,eAAe;EACbC,IAAGA,CAAA,EAAK;IACN,OAAO;MACLC,QAAQ,EAAE,EAAE;MACZC,QAAQ,EAAE;IACZ;EACF,CAAC;EACDC,OAAMA,CAAA,EAAK;IACT,MAAMC,UAAS,GAAI,IAAIL,kBAAkB,CAAC;MACxCM,QAAQ,EAAE,sBAAsB;MAChCC,WAAW,EAAE,kCAAkC;MAC/CC,OAAO,EAAE,IAAI;MACbC,cAAc,EAAE,IAAI;MACpBC,WAAW,EAAE;QAACC,KAAK,EAAE,OAAO;QAAEC,IAAI,EAAE,CAAC;QAAEC,MAAM,EAAE;MAAI;IACrD,CAAC;IACDR,UAAU,CAACS,cAAc,CAAEC,MAAM,IAAK;MACpC,IAAIA,MAAM,EAAE;QACV;QACA,MAAMC,KAAI,GAAIX,UAAU,CAACY,IAAI,CAACC,QAAQ,CAAC;QACvC;MACF,OAAO;QACLC,OAAO,CAACC,GAAG,CAAC,uBAAuB;MACrC;IACF,CAAC;EACH,CAAC;EACDC,OAAO,EAAE;IACPC,KAAIA,CAAA,EAAK;MACP,IAAI,CAAC,IAAI,CAACpB,QAAQ,EAAE;QAClBqB,KAAK,CAAC,aAAa;QACnB,IAAI,CAACrB,QAAO,GAAI,EAAC;QACjB;MACF;MAEA,IAAI,CAAC,IAAI,CAACC,QAAQ,EAAE;QAClBoB,KAAK,CAAC,cAAc;QACpB,IAAI,CAACpB,QAAO,GAAI,EAAC;QACjB;MACF;MAEAoB,KAAK,CAAC,SAAS;MACf,IAAI,CAACC,OAAO,CAACC,IAAI,CAAC;QAAEC,IAAI,EAAE;MAAO,CAAC;IACpC;EACF;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}